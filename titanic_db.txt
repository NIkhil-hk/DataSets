crime_db <- mongo(collection = "crime_data", db = "crimeDB", url = "mongodb://localhost:27017")

crime_db$insert(data.frame(
  Crime_Type = c("Theft", "Assault", "Burglary", "Fraud"),
))

crime_db$find('{"Year": 2021}', fields = '{"Crime_Type": 1, "City": 1, "_id": 0}')

crime_db$find('{"Year": {"$gte": 2021}}')

crime_db$update('{"Crime_Type": "Theft"}', '{"$set": {"Count": 600}}')

crime_db$distinct("Crime_Type")

Number of Crimes Reported in Each City
crime_summary <- crime_db$aggregate('[
  {"$group": {"_id": "$City", "Total_Crime": {"$sum": "$Count"}}}
]')
print(crime_summary)
ggplot(crime_summary, aes(x = _id, y = Total_Crime, fill = _id)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Total Crimes per City", x = "City", y = "Total Crimes")

crime_db$find(sort = '{"Count": -1}', limit = 1)

crime_db$find('{"City": "New York"}')

 Number of Different Crime Types
crime_db$aggregate('[
  {"$group": {"_id": "$Crime_Type", "Total_Crime": {"$sum": "$Count"}}}
]')
ggplot(crime_summary, aes(x = _id, y = Total_Crime, fill = _id)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Crime Type Distribution", x = "Crime Type", y = "Total Crimes")

crime_db$find('{"Year": {"$gte": 2015, "$lte": 2020}}')

crime_db$aggregate('[
  {"$group": {"_id": "$Year", "Avg_Crime": {"$avg": "$Count"}}}
]')
ggplot(crime_summary, aes(x = _id, y = Avg_Crime)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Average Crime Per Year", x = "Year", y = "Avg Crime Count")

City with the Most Crime
crime_db$aggregate('[
  {"$group": {"_id": "$City", "Total_Crime": {"$sum": "$Count"}}},
  {"$sort": {"Total_Crime": -1}},
  {"$limit": 1}
]')

Year with the Highest Crimes Reportedcrime_db$aggregate('[
  {"$group": {"_id": "$Year", "Total_Crime": {"$sum": "$Count"}}},
  {"$sort": {"Total_Crime": -1}},
  {"$limit": 1}
]')

Most Dangerous Year for a Specific City ("Chicago")
crime_db$aggregate('[
  {"$match": {"City": "Chicago"}},
  {"$group": {"_id": "$Year", "Total_Crime": {"$sum": "$Count"}}},
  {"$sort": {"Total_Crime": -1}},
  {"$limit": 1}
]')

pracs

library(ggplot2)
library(dplyr)
library(mongolite)
library(lubridate)
library(hms)
crimedata = mongo(collection = "Crimes",db="TYIT2024")
crimedata$count()
domestic = crimedata$find('{"Domestic":true}',fields='{"_id":0,"Domestic":1,"Date":1}')
domestic =data.frame(domestic)
domestic
domestic$Date=mdy_hms(domestic$Date)
domestic$weekday = weekdays(domestic$Date)
domestic$weekday
domestic$month = month(domestic$Date,label = TRUE)
domestic$month
weekdaycounts = as.data.frame(table(domestic$weekday))
weekdaycounts

weekdaycounts$Var1 = factor(weekdaycounts$Var1,ordered = TRUE, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))



ggplot(data = weekdaycounts,aes(x = Var1,y = Freq,group = 1))+geom_line(size=2,colour = "red")+geom_point()


-------------------------------

library(ggplot2)
library(dplyr)
library(mongolite)
library(lubridate)
library(hms)

crimedata = mongo(collection = "crm",db="DB")

crimedata$count()

domestic = crimedata$find('{"Domestic":true}',fields='{"_id":0,"Domestic":1,"Date":1}')

domestic =data.frame(domestic)
domestic

domestic$Date=mdy_hms(domestic$Date)

domestic$Hour <- hour(domestic$Date)

domestic$Day <- wday(domestic$Date, label = TRUE, abbr = FALSE)

domestic

fre_table = domestic %>%
  group_by(Hour, Day) %>%
  summarise(Count = n(), .groups = 'drop')

View(fre_table)

#for bar graph

ggplot(fre_table, aes(x = Hour, y = Count, fill = Day)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = "Set3") +
  labs(title = "Number of Crimes by Hour and Day of the Week",
       x = "Hour",
       y = "Number of Crimes",
       fill = "Day of Week") +
  theme_minimal()

#for curves

ggplot(fre_table, aes(x = Hour, y = Count, color = Day, group = Day)) +
  geom_line(size = 1.2) +  # Draw smooth lines
  geom_point(size = 2) +   # Add points for clarity
  scale_color_brewer(palette = "Set1") +  # Choose a color palette
  labs(title = "Number of Crimes by Hour for Each Day of the Week",
       x = "Hour of the Day",
       y = "Number of Crimes",
       color = "Day of Week") +
  scale_x_continuous(breaks = seq(0, 23, 1)) +  # Show all hours on the x-axis
  theme_minimal() +
  theme(
    legend.position = "bottom",  # Move legend below the plot
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
  )

#for separating weekends with weekdays

fre_table <- fre_table %>%
  mutate(DayType = ifelse(Day %in% c("Saturday", "Sunday"), "Weekend", "Weekday"))

# Line plot with Weekday vs Weekend distinction
ggplot(fre_table, aes(x = Hour, y = Count, color = DayType, group = Day)) +
  geom_line(size = 1.2) +  # Draw smooth lines
  geom_point(size = 2) +   # Add points for clarity
  scale_color_manual(values = c("Weekday" = "blue", "Weekend" = "red")) +  # Different colors for Weekday and Weekend
  
  scale_x_continuous(breaks = seq(0, 23, 1)) +  # Show all hours on the x-axis
  theme_minimal() +
  theme(
    legend.position = "bottom",  # Move legend below the plot
    axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels
  )

